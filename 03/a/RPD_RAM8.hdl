// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel[0..2]=address[0..2],a=loadR1,b=loadR2,c=loadR3,d=loadR4,e=loadR5,f=loadR6,g=loadR7,h=loadR8);
    Register(in[0..15]=in[0..15],load=loadR1,out[0..15]=outR1);
    Register(in[0..15]=in[0..15],load=loadR2,out[0..15]=outR2);
    Register(in[0..15]=in[0..15],load=loadR3,out[0..15]=outR3);
    Register(in[0..15]=in[0..15],load=loadR4,out[0..15]=outR4);
    Register(in[0..15]=in[0..15],load=loadR5,out[0..15]=outR5);
    Register(in[0..15]=in[0..15],load=loadR6,out[0..15]=outR6);
    Register(in[0..15]=in[0..15],load=loadR7,out[0..15]=outR7);
    Register(in[0..15]=in[0..15],load=loadR8,out[0..15]=outR8);
    Mux8Way16(a[0..15]=outR1,b[0..15]=outR2,c[0..15]=outR3,d[0..15]=outR4,e[0..15]=outR5,f[0..15]=outR6,g[0..15]=outR7,h[0..15]=outR8,sel[0..2]=address[0..2],out[0..15]=out[0..15]);
    
}