// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    
    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key, keyStillPressed;

        //Print cursor to screen
        do Output.printChar(0);

        //Do nothing until a key is pressed
        let key = Keyboard.keyPressed();
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }

        //Do nothing until pressed key is released
        let keyStillPressed = key;
        while (keyStillPressed = key) {
            let keyStillPressed = Keyboard.keyPressed();
        }

        //Backspace to delete black square representing cursor
        do Output.backSpace();

        //Print character to screen
        do Output.printChar(key); 

        return key;
    }

    
    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String input;
        var char nextChar;

        do Output.printString(message);

        //Allocate 50 character array for input string. A better approach would be to initially allocate a smaller array, and then dynamically add additional space as necessary (by constructing a new string variable and copying over contents of initial string variable) if user needs more than the initially allocated space, but decided not to do this for now.

        let input = String.new(50);

        //Continue reading input from user and appending characters to input until user presses newLine key

        while (~(nextChar = String.newLine())) {
            let nextChar = Keyboard.readChar(); 
            if (~(nextChar = String.newLine())) {
                if (nextChar = 129) { //If character pressed is backspace, erase last character of input
                    do input.eraseLastChar();
                } 
                else {
                    do input.appendChar(nextChar);
                }
            }  
        } 
        
        return input;    
    }   


    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String input; 

        let input = Keyboard.readLine(message);
        return input.intValue(); 
    }
}
