// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maxLen,len;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        if (maxLength<0) { //If maxLength<0, call system error function
            do Sys.error(14);
        }
        else {
            if (maxLength > 0) { //If maxLength>0, allocate array with length maxLength
                let str = Array.new(maxLength);
            }
        }
        
        let maxLen = maxLength;
        let len = 0; 
                
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen>0) {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j<len) {
            return str[j];
        }
        else {
            return Sys.error(15);
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j<len) {
            let str[j] = c;
            return;
        }
        else {
            do Sys.error(16);
            return;
        }
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len<maxLen) {
            let str[len] = c;
            let len = len + 1;
            return this; 
        }
        else {
            return Sys.error(17);
        }
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len>0) {
            let len = len - 1;
            return;
        }
        else {
            do Sys.error(18); 
            return;
        }
         
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isDigit;
        var int value, i, numberOfDigits;

        let isDigit = true; 
        let numberOfDigits = 0;
        let i = 0;

        //Figure out number of digits (including minus sign, if there is one)
        while (isDigit) {
            if ((((str[i] > 47) & (str[i] < 58)) | ((i = 0) & (str[i] = 45))) & (i < len)) {
                let numberOfDigits = numberOfDigits + 1;
                let i = i + 1;
            }
            else {
                let isDigit = false;
            }
        }

        //Set starting index to use to iterate through string to compute integer value, skipping first character if it is a minus/negative sign
        if (str[0] = 45) {
            let i = 1;
        }
        else {
            let i = 0;
        }

        let value = 0;

        //Figure out integer value of string and return it
        while (i < (numberOfDigits)) {
            let value = value*10 + ((str[i]-48));
            let i = i + 1;
        }

        //Return value (first take negative of computed value if string started with a minus/negative sign)
        if (str[0] = 45) {
            return -value;
        }
        else {
            return value;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, nextVal;
        
        let len = 0;
        let nextVal = val/10; 
        let lastDigit = val - (nextVal*10);

        if (nextVal=0) {
            if (lastDigit<0) {
                do appendChar(45);
                do appendChar(48+Math.abs(lastDigit));
            }
            else {
                do appendChar(48+lastDigit);
            }
        
            return;
        }
        else {
            do setInt(nextVal);
            do appendChar(48+Math.abs(lastDigit));
            return;
        }
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
