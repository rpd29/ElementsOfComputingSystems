// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel[0..2]=address[0..2],a=loadRAM1,b=loadRAM2,c=loadRAM3,d=loadRAM4,e=loadRAM5,f=loadRAM6,g=loadRAM7,h=loadRAM8);
    RAM8(in[0..15]=in[0..15],load=loadRAM1,address[0..2]=address[3..5],out=outRAM1);
    RAM8(in[0..15]=in[0..15],load=loadRAM2,address[0..2]=address[3..5],out=outRAM2);
    RAM8(in[0..15]=in[0..15],load=loadRAM3,address[0..2]=address[3..5],out=outRAM3);
    RAM8(in[0..15]=in[0..15],load=loadRAM4,address[0..2]=address[3..5],out=outRAM4);
    RAM8(in[0..15]=in[0..15],load=loadRAM5,address[0..2]=address[3..5],out=outRAM5);
    RAM8(in[0..15]=in[0..15],load=loadRAM6,address[0..2]=address[3..5],out=outRAM6);
    RAM8(in[0..15]=in[0..15],load=loadRAM7,address[0..2]=address[3..5],out=outRAM7);
    RAM8(in[0..15]=in[0..15],load=loadRAM8,address[0..2]=address[3..5],out=outRAM8);
    Mux8Way16(a[0..15]=outRAM1,b[0..15]=outRAM2,c[0..15]=outRAM3,d[0..15]=outRAM4,e[0..15]=outRAM5,f[0..15]=outRAM6,g[0..15]=outRAM7,h[0..15]=outRAM8,sel[0..2]=address[0..2],out[0..15]=out[0..15]);

}