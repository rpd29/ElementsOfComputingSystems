// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //zeroing x if selected
    Not(in=zx, out=zx')
    And16(a[0]=zx', a[1]=zx', a[2]= zx', a[3]= zx', a[4]= zx', a[5]= zx', a[6]=zx', a[7]=zx', a[8]=zx', a[9]=zx', a[10]=zx', a[11]=zx', a[12]=zx', a[13]=zx', a[14]=zx', a[15]=zx', b[16]=x[16], out=x1[16])
    
    //not x if selected
    Not16(in[16]=x1[16], out[16]=x1'[16])
    Not(in=nx, out=nx')
    And16(a[16]=x1[16], b[16]=nx', out[16]=x1''[16])
    And16(a[16]=nx, b[16]=x1'[16], out[16]=x1'''[16])
    Or16(a[16]=x1''[16], b[16]=x1'''[16], out[16]=x2[16]) 
    
    //zeroing y if selected
    Not(in=zy, out=zy')
    And16(a[16]=zy', b=y[16], out=y1[16])
    
    //not y if selected
    Not16(in[16]=y1[16], out[16]=y1'[16])
    Not(in=ny, out=ny')
    And16(a[16]=x1[16], b[16]=ny', out[16]=y1''[16])
    And16(a[16]=ny, b[16]=y1'[16], out[16]=y1'''[16])
    Or(a[16]=y1''[16], b[16]=y1'''[16], out[16]=y2[16]) 

    //out=x+y or out=x&y 
    And16(a[16]=x2[16], b[16]=y2[16], out[16]=f'[16])
    Add16(a[16]=x2[16], b[16]=y2[16], out[16]=f''[16])
    Mux16(a[16]=f'[16], b[16]=f''[16], sel=f, out[16]=output'[16])

    //negate output if selected
    Not16(in[16]=output'[16], out[16]=output''[16])
    Not(in=no, out=no')
    And16(a[16]=output'[16], b[16]=no', out[16]=ouput'''[16])
    And16(a[16]=no, b[16]=output''[16], out[16]=output''''[16])
    Or16(a[16]=output'''[16], b[16]=output''''[16], out[16]=output[16])

    //Set zr=1 if output==0 
    Or8Way(in[8]=output[0..7], out=zr1)
    Or8Way(in[8]=output[8..15], out=zr2)
    Or(a=zr1, b=zr2, out=zr')
    Not(in=zr', out=zr)

    //Set ng=1 if output<0
    Or8Way(in[8]=output[8..15], out=ng)

}